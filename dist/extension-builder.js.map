{"version":3,"file":"extension-builder.js","sourceRoot":"","sources":["../src/extension-builder.ts"],"names":[],"mappings":"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","sourcesContent":["import { BuilderContext, BuilderOutput, createBuilder, targetFromTargetString } from '@angular-devkit/architect';\nimport { JsonObject } from '@angular-devkit/core';\nimport { ApplicationBuilderOptions, buildApplication } from '@angular/build';\nimport * as esbuild from 'esbuild';\nimport * as path from 'node:path';\n\n// Define the options for our custom builder\ninterface Options extends JsonObject {\n  backgroundScript: string;\n  contentScript: string;\n}\n\nexport default createBuilder<Options>(buildExtensionasync);\n\nasync function buildExtensionasync (options: Options, context: BuilderContext): Promise<BuilderOutput> {\n  context.logger.info('Custom builder is running!');\n\n  if (!context.target) {\n    context.logger.error(\"Cannot execute the build without a target\");\n    return { success: false, error: \"Cannot execute the build without a target\"};\n  }\n\n  // 1. Get the main application build options\n  const buildTarget = targetFromTargetString(context.target.project + ':build:' + context.target.configuration);\n  const buildOptions = await context.getTargetOptions(buildTarget) as unknown as ApplicationBuilderOptions;\n\n  // 2. Execute the default Angular application builder (esbuild)\n  try {\n    for await (const output of buildApplication(buildOptions, context)) {\n        // This loop runs for each build, and for rebuilds in watch mode.\n        // For a single build, it will run once.\n    }\n    context.logger.info('Main application build successful.');\n  } catch (error) {\n    context.logger.error('Main application build failed:');\n    if (error instanceof Error) {\n      context.logger.error(error.toString());\n    }\n    return { success: false, error: (error as Error).message };\n  }\n\n  const outputPathClass = (buildOptions.outputPath as { base: string, browser?: string });\n\n  // 3. Determine the output path\n  const outputPath = path.join(\n    context.workspaceRoot,\n    outputPathClass.base,\n    outputPathClass.browser ?? \"\"\n  );\n\n  // 4. Build the background and content scripts using esbuild\n  const scriptsToBuild: { [key: string]: string | undefined } = {\n    background: options.backgroundScript,\n    content: options.contentScript,\n  };\n\n  for (const [name, scriptPath] of Object.entries(scriptsToBuild)) {\n    if (scriptPath) {\n      try {\n        await esbuild.build({\n          entryPoints: [path.join(context.workspaceRoot, scriptPath)],\n          bundle: true,\n          outfile: path.join(outputPath, `${name}.js`),\n          platform: 'browser',\n          target: 'es2020',\n          format: 'iife',\n        });\n        context.logger.info(`Successfully built ${name} script.`);\n      } catch (error) {\n        context.logger.error(`Error building ${name} script:`);\n        if (error instanceof Error) {\n          context.logger.error(error.toString());\n        }\n        return { success: false, error: (error as Error).message };\n      }\n    }\n  }\n\n  return { success: true };\n}\n"]}